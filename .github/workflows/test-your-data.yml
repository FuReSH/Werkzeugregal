# This is a basic validation workflow for TESTING yaml data for tools and blackboxes

name: Last check of YAML test data

on:
  push:
    branches: [ "main" ]
    paths:
     - 'test/**/*.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    name: Test changed-files
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files in the test folder
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          files: |
            test/tools/*.{yml,yaml}
            test/blackboxes/*.{yml,yaml}
      - name: Run step if any file(s) in the test folder change
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "One or more files in the test folder has changed."
          echo "List all the files that have changed: ${{ steps.changed-files.outputs.all_changed_files }}"
  check-test:
      runs-on: ubuntu-latest
      # require the first job to have ran
      needs: build
      # only run there are changed files
      if: ${{ needs.build.changed-files.outputs.any_changed == 'true' }}
      strategy:
        # You can use PyPy versions in python-version.
        # For example, pypy-2.7 and pypy-3.8
        matrix:
          python-version: ["3.8", "3.9", "3.10", "3.11"]
      steps:
        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v4
          with:
            python-version: ${{ matrix.python-version }}
        # You can test your matrix by printing the current Python version
        - name: Display Python version
          run: python -c "import sys; print(sys.version)"
        - name: Install check-jsonschema tool
          run: pip install check-jsonschema
        - name: Validate tool or blackbox test data
          #if: contains(steps.changed-files.outputs.modified_files, '*.tool.yml')
          run: check-jsonschema --schemafile ${GITHUB_WORKSPACE}/schemas/tool.schema.json ${{steps.changed-files.outputs.modified_files}*.tool.yml}
        #- name: Validate blackbox test data
          #if: contains(steps.changed-files.outputs.modified_files, '*.blackbox.yml')
          #run: check-jsonschema --check-metaschema ${GITHUB_WORKSPACE}/schemas/blackbox.schema.json ${GITHUB_WORKSPACE}/test/blackboxes/*
